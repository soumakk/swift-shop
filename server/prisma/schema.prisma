// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  email  String  @unique
  uid    String
  avatar String?

  orders    Order[]
  addresses UserAddress[]
  wishlist  Wishlist[]
}

model UserAddress {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String
  address   String
  locality  String?
  city      String
  state     String
  zipcode   String
  country   String
  phoneNo   String
  isDefault Boolean

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  products Product[]
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  variants ProductVariant[]
}

model ProductVariant {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  color  String
  sku    String
  images String[]
  price  Float

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  orderItems OrderItem[]
  wishlist   Wishlist[]
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalAmount Float
  status      OrderStatus

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  orderItems OrderItem[]

  paymentIntentId String?
  paymentStatus   PaymentStatus?

  orderAddress   OrderAddress @relation(fields: [orderAddressId], references: [id])
  orderAddressId String       @db.ObjectId
}

model OrderAddress {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  address  String
  locality String?
  city     String
  state    String
  zipcode  String
  country  String
  phoneNo  String
  name     String

  orders Order[]
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity Int

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId

  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String         @db.ObjectId
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String         @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

enum OrderStatus {
  Pending
  Paid
  Shiped
  Failed
  Completed
  Canceled
}

enum PaymentStatus {
  Pending
  Succeeded
  Failed
  Refunded
}
